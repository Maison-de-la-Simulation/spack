#/bin/bash
set -e


do_spack_pinstall ()
{
    RUNNING_SPACKS=""
    for N in $(seq 1 ${PARALLELISM})
    do
        spack install ${SPACK_INSTALL_ARGS} "$@" &
        RUNNING_SPACKS="$RUNNING_SPACKS $!"
    done
    for N in $RUNNING_SPACKS
    do
        wait $N || {
            echo -e "\n\n******* Failure logs *******\n"
            tail -n +1 -- /tmp/root/spack-stage/spack-stage-*/spack-*-out.txt
            return 1
        }
    done
}


echo -e "\n\n******* Handling configuration *******\n"
# compiler if not specified
COMPILER="${COMPILER:-gcc}"
# dependency set if not specified
DEPVERS="${DEPVERS:-mpich-latest}"
# parallelism if not specified 
PARALLELISM="${PARALLELISM:-1}"
# spack install arguments if not specified
SPACK_INSTALL_ARGS="${SPACK_INSTALL_ARGS:-"--show-log-on-error --fail-fast"}"
# path to PDI spack repository if not specified
PDI_SPACK_REPO="${PDI_SPACK_REPO:-/opt/spack-pdi}"
# path to the dependency set files if not specified
PDI_DEPS_DIR="${PDI_DEPS_DIR:-${PDI_SPACK_REPO}/tests}"
# path to spack work directory if not specified
SPACK_WORKDIR="${SPACK_WORKDIR:-/opt/spackwd}"
echo "COMPILER=${COMPILER}"
echo "DEPVERS=${DEPVERS}"
echo "PARALLELISM=${PARALLELISM}"
echo "SPACK_INSTALL_ARGS=${SPACK_INSTALL_ARGS}"
echo "PDI_SPACK_REPO=${PDI_SPACK_REPO}"
echo "PDI_DEPS_DIR=${PDI_DEPS_DIR}"
echo "SPACK_WORKDIR=${SPACK_WORKDIR}"


echo -e "\n\n******* Adding required spack repositories *******\n"
mkdir -p "${SPACK_WORKDIR}/repos"
git clone https://github.com/leobago/fti-spack ${SPACK_WORKDIR}/repos/fti
spack repo add "${SPACK_WORKDIR}/repos/fti"
git clone https://gitlab.jsc.fz-juelich.de/cstao-public/SIONlib/spack-repository.git "${SPACK_WORKDIR}/repos/SIONlib"
spack repo add "${SPACK_WORKDIR}/repos/SIONlib"
spack repo add "${PDI_SPACK_REPO}"


echo -e "\n\n******* Checking if install is required for ${COMPILER} *******\n"
COMPILER_NAME="$(echo ${COMPILER} | sed 's/[ @%~+].*//')"
COMPILER_VERSION="$(echo ${COMPILER} | sed 's/^[^ @%~+]*//')"
case "${COMPILER_NAME}" in
"clang")
    COMPILER_NAME=llvm
;;
intel|oneapi)
    COMPILER_NAME=intel-oneapi-compilers
;;
esac
COMPILERPKG="${COMPILER_NAME}${COMPILER_VERSION}"
if ! spack compilers | grep "${COMPILERPKG}" &>/dev/null
then
    echo -e "\n\n******* Installing compiler ${COMPILER_NAME} (${COMPILER_VERSION}) *******\n"
    spack spec "${COMPILERPKG}"
    do_spack_pinstall "${COMPILERPKG}"
    spack load "${COMPILERPKG}"
    spack compiler find
else
    echo "No install required for ${COMPILER_NAME} (${COMPILER_VERSION})"
fi

echo -e "\n\n******* Setting up environment *******\n"
mkdir -p "${SPACK_WORKDIR}/environment"
cd "${SPACK_WORKDIR}/environment"
cp "${PDI_DEPS_DIR}/${DEPVERS}.yaml" spack.yaml
echo '  concretization: together' >> spack.yaml
spack env activate .
# spack config add config:install_tree:root:/opt/software
# spack config add config:view:/opt/view
spack config add "packages:all:compiler:[${COMPILER}]"
spack add \
    pdiplugin-decl-hdf5@develop~fortran \
    pdiplugin-decl-netcdf@develop \
    pdiplugin-flowvr@develop \
    pdiplugin-mpi@develop \
    pdiplugin-pycall@develop \
    pdiplugin-serialize@develop \
    pdiplugin-set-value@develop \
    pdiplugin-trace@develop \
    pdiplugin-user-code@develop \
    pdiplugin-decl-sion@develop \
    pdiplugin-fti@develop \
    pdi@develop~fortran
cat spack.yaml

echo -e "\n\n******* Resolving dependencies *******\n"
spack concretize

echo -e "\n\n******* Installing *******\n"
do_spack_pinstall
